---

# check state file
- name: Stat - /root/.state.cluster.joined
  ansible.builtin.stat:
    path: /root/.state.cluster.joined
  register: cluster_joined
  when: "'worker' in group_names"

# Get join token
- name: Shell - kubeadm token create --print-join-command
  ansible.builtin.shell: kubeadm token create --print-join-command
  register: cluster_join_command
  when: "'control' in group_names"

# Display join command
- ansible.builtin.debug: msg="{{ cluster_join_command.stdout }}"
  when: "'control' in group_names"

- ansible.builtin.debug: msg="{{ hostvars['k8s0'].cluster_join_command.stdout }}"
  when: "'worker' in group_names"

# Join worker nodes
- name: Shell - kubeadm join ...
  ansible.builtin.shell: "{{ hostvars['k8s0'].cluster_join_command.stdout }}"
  register: worker_join_output
  when: "'worker' in group_names and cluster_joined.stat.exists != True"

# Display join command output
- ansible.builtin.debug: msg="{{ worker_join_output.stdout_lines }}"
  when: "'worker' in group_names and cluster_joined.stat.exists != True"

- ansible.builtin.debug: msg="{{ worker_join_output.stderr_lines }}"
  when: "'worker' in group_names and cluster_joined.stat.exists != True"

# Touch state file
- name: File - touch /root/.state.cluster.joined
  ansible.builtin.file:
    path: /root/.state.cluster.joined
    state: touch
  when: "'worker' in group_names"
